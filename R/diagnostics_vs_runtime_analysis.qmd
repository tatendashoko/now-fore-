---
title: "Exploring timing and diagnostics"
title-block-banner: true
editor_options: 
  chunk_output_type: console
---

```{r packages, include=FALSE}
library(data.table)
library(tidyverse)
library(here)
```


# Get files

## Diagnostics

```{r load_diagnostics}
diagnostics_csvs <- here("output", list.files("output", ".csv"))

# Get province names
diagnostics_provinces <- gsub(".*_(.*)\\.csv$", "\\1", diagnostics_csvs)

diagnostics <- lapply(as.list(diagnostics_csvs), fread)
names(diagnostics) <- diagnostics_provinces

# Combine the files
diagnostics_dt <- diagnostics |> rbindlist(idcol = "province")
```

## Runtimes

```{r load_runtimes}
runtimes_daily_paths <- here("./output", list.files("output", ".*_daily(.*).rds"))
runtime_daily_provinces <- gsub(".*_(.*)\\.rds$", "\\1", runtimes_daily_paths)

# get forecasts and add names
runtimes_daily <- lapply(
	as.list(runtimes_daily_paths),
	function(x) {
		# x is a nested dt of forecasts, timing, and diagnostics for a single slide
		dt <- readRDS(x)
		dt$timing |> rbindlist()
	}
)

names(runtimes_daily) <- runtime_daily_provinces

# Combine the files
runtimes_daily_dt <- runtimes_daily |> rbindlist(idcol = "province")
runtimes_daily_dt$frequency <- "daily"

# Weekly forecasts
runtimes_weekly_paths <- here("./output", list.files("output", ".*_weekly(.*).rds"))
runtime_weekly_provinces <- gsub(".*_(.*)\\.rds$", "\\1", runtimes_weekly_paths)

# get forecasts and add names
runtimes_weekly <- lapply(
	as.list(runtimes_weekly_paths),
	function(x) {
		# x is a nested dt of forecasts, timing, and diagnostics for a single slide
		dt <- readRDS(x)
		dt$timing |> rbindlist()
	}
)

names(runtimes_weekly) <- runtime_weekly_provinces

# Combine the files
runtimes_weekly_dt <- runtimes_weekly |> rbindlist(idcol = "province")
runtimes_weekly_dt$frequency <- "weekly"

# Combine the daily and weekly data
timing_dt_combined <- rbind(runtimes_daily_dt, runtimes_weekly_dt)
timing_dt_combined <- timing_dt_combined[, timing := round(lubridate::as.duration(timing), 1)]
# reshape the data to wide
timing_dt_reshaped <- timing_dt_combined |>
	dcast(province + slide ~ frequency, value.var = "timing")

# Add categorical indicator of comparison

timing_dt_reshaped <- timing_dt_reshaped[, daily_greater := ifelse(daily > weekly, "yes", "no")]
```

# Low run times

```{r low_runtimes}
# Subset cases low run time (value is arbitrarily close to 0; i.e., almost didn't run for what we expect of the model)
# daily runtimes
low_daily_runtimes <- timing_dt_reshaped[daily < lubridate::duration(10), -c("weekly", "daily_greater")]

setnames(low_daily_runtimes, "daily", "timing")

low_daily_runtimes[, type := "daily"]

# weekly runtimes
low_weekly_runtimes <- timing_dt_reshaped[weekly < lubridate::duration(10), -c("daily", "daily_greater")]

setnames(low_weekly_runtimes, "weekly", "timing")

low_weekly_runtimes[, type := "weekly"]


combined_bad_runs <- rbind(low_daily_runtimes, low_weekly_runtimes)

# Combine runtimes with diagnostics
bad_runs <- merge.data.table(combined_bad_runs, diagnostics_dt, by = c("province", "slide", "type"))

bad_runs <- bad_runs[, -c("samples")] |>
	setnames("type", "forecast_type")

# Order by timing
bad_runs <- bad_runs[order(timing), ]
```

# Plots

```{r plot_timing}
timing_plt <- ggplot(data = bad_runs) +
	# geom_point(
	# 	aes(x = slide,
	# 			y = timing,
	# 			color = forecast_type
	# 			)
	# ) +
	geom_point(
		aes(
			x = slide,
			y = divergent_transitions,
			color = forecast_type
		)
	) +
	# scale_y_continuous(sec.axis = sec_axis(~ ., name = "Divergent transitions")) +
	# coord_flip() +
	facet_wrap(~province) +
	theme_bw()

timing_plt
```


## Divergences

```{r zoom_in}
ec_forecasts <- readRDS("output/forecast_weekly_EC.rds")

ec_forecast_unnested <- ec_forecasts[, rbindlist(forecast, use.names = TRUE, fill = TRUE)]
```

